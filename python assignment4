1. What exactly is []?
   [] represents an empty list in Python.
   
2. In a list of values stored in a variable called spam, how would you assign the value 'hello' as the third value? (Assume [2, 4, 6, 8, 10] are in spam.)
   To assign the value 'hello' as the third value in the list stored in the variable spam,  you  can use the index 2 (since indexing is zero-based in Python):
   spam[2] = 'hello'
   

Let's pretend the spam includes the list ['a', 'b', 'c', 'd'] for the next three queries.

3. What is the value of spam[int(int('3' * 2) / 11)]?
   'd'
4. What is the value of spam[-1]?
   'd'  (negative indexing)
5. What is the value of spam[:2]?
   ['a','b']
   
   
Let's pretend bacon has the list [3.14, 'cat,' 11, 'cat,' True] for the next three questions.
6. What is the value of bacon.index('cat')?
   '1'
7. How does bacon.append(99) change the look of the list value in bacon?
   adds 99 to the end of the list     [3.14, 'cat,' 11, 'cat,' True','99'] 
8. How does bacon.remove('cat') change the look of the list in bacon?
    [3.14, ' 11, 'cat,' True']
    
    
9. What are the list concatenation and list replication operators?
   The list concatenation operator is +, and the list replication operator is *.
    
10. What is difference between the list methods append() and insert()?
    The append() method adds an element to the end of a list, while the insert() method allows you to insert an element at a specific index.
    
11. What are the two methods for removing items from a list?
    The two methods for removing items from a list are:
    remove(): Removes the first occurrence of a specified value.
    pop(): Removes and returns the item at a specified index (if index is not provided, it removes the last item).
    
12. Describe how list values and string values are identical.
    Both list values and string values are sequences, and they share some common characteristics:
     They can be indexed and sliced.
     They support the len() function to get their length.
     They can be used in loops.
    
13. What's the difference between tuples and lists?
    The main differences between tuples and lists are:
    Lists are mutable , while tuples are immutable.
    Lists are created using square brackets [], and tuples use parentheses ().
    
14. How do you type a tuple value that only contains the integer 42?
    my_tuple = (42,)

15. How do you get a list value's tuple form? How do you get a tuple value's list form?
    To convert a list value to a tuple, you can use the tuple() constructor, and to convert a tuple value to a list, you can use the list() constructor:
      my_list = [1, 2, 3]
      my_tuple = tuple(my_list)
      my_list_again = list(my_tuple)

16. Variables that "contain" list values are not necessarily lists themselves. Instead, what do they contain?
    Variables that "contain" list values actually contain references to the lists, not the lists themselves. The variable holds the memory address where the list is stored.
    
17. How do you distinguish between copy.copy() and copy.deepcopy()?
    copy.copy() creates a shallow copy of a list, meaning it creates a new list but does not create new copies of the objects inside the original list. copy.deepcopy() creates a         deep copy, which includes copies of the objects inside the original list, recursively       copying nested structures.

